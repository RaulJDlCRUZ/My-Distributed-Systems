# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.9
#
# <auto-generated>
#
# Generated from file `Math.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Calculator
_M_Calculator = Ice.openModule('Calculator')
__name__ = 'Calculator'

_M_Calculator._t_Math = IcePy.defineValue('::Calculator::Math', Ice.Value, -1, (), False, True, None, ())

if 'MathPrx' not in _M_Calculator.__dict__:
    _M_Calculator.MathPrx = Ice.createTempClass()
    class MathPrx(Ice.ObjectPrx):

        def sum(self, x, y, context=None):
            return _M_Calculator.Math._op_sum.invoke(self, ((x, y), context))

        def sumAsync(self, x, y, context=None):
            return _M_Calculator.Math._op_sum.invokeAsync(self, ((x, y), context))

        def begin_sum(self, x, y, _response=None, _ex=None, _sent=None, context=None):
            return _M_Calculator.Math._op_sum.begin(self, ((x, y), _response, _ex, _sent, context))

        def end_sum(self, _r):
            return _M_Calculator.Math._op_sum.end(self, _r)

        def mult(self, x, y, context=None):
            return _M_Calculator.Math._op_mult.invoke(self, ((x, y), context))

        def multAsync(self, x, y, context=None):
            return _M_Calculator.Math._op_mult.invokeAsync(self, ((x, y), context))

        def begin_mult(self, x, y, _response=None, _ex=None, _sent=None, context=None):
            return _M_Calculator.Math._op_mult.begin(self, ((x, y), _response, _ex, _sent, context))

        def end_mult(self, _r):
            return _M_Calculator.Math._op_mult.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Calculator.MathPrx.ice_checkedCast(proxy, '::Calculator::Math', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Calculator.MathPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Calculator::Math'
    _M_Calculator._t_MathPrx = IcePy.defineProxy('::Calculator::Math', MathPrx)

    _M_Calculator.MathPrx = MathPrx
    del MathPrx

    _M_Calculator.Math = Ice.createTempClass()
    class Math(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Calculator::Math', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Calculator::Math'

        @staticmethod
        def ice_staticId():
            return '::Calculator::Math'

        def sum(self, x, y, current=None):
            raise NotImplementedError("servant method 'sum' not implemented")

        def mult(self, x, y, current=None):
            raise NotImplementedError("servant method 'mult' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Calculator._t_MathDisp)

        __repr__ = __str__

    _M_Calculator._t_MathDisp = IcePy.defineClass('::Calculator::Math', Math, (), None, ())
    Math._ice_type = _M_Calculator._t_MathDisp

    Math._op_sum = IcePy.Operation('sum', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    Math._op_mult = IcePy.Operation('mult', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), None, ())

    _M_Calculator.Math = Math
    del Math

# End of module Calculator
