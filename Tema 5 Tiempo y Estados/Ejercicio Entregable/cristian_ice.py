# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.9
#
# <auto-generated>
#
# Generated from file `cristian.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module ssdd
_M_ssdd = Ice.openModule('ssdd')
__name__ = 'ssdd'

_M_ssdd._t_Cristian = IcePy.defineValue('::ssdd::Cristian', Ice.Value, -1, (), False, True, None, ())

if 'CristianPrx' not in _M_ssdd.__dict__:
    _M_ssdd.CristianPrx = Ice.createTempClass()
    class CristianPrx(Ice.ObjectPrx):

        def getServerTime(self, dni, tc1, context=None):
            return _M_ssdd.Cristian._op_getServerTime.invoke(self, ((dni, tc1), context))

        def getServerTimeAsync(self, dni, tc1, context=None):
            return _M_ssdd.Cristian._op_getServerTime.invokeAsync(self, ((dni, tc1), context))

        def begin_getServerTime(self, dni, tc1, _response=None, _ex=None, _sent=None, context=None):
            return _M_ssdd.Cristian._op_getServerTime.begin(self, ((dni, tc1), _response, _ex, _sent, context))

        def end_getServerTime(self, _r):
            return _M_ssdd.Cristian._op_getServerTime.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_ssdd.CristianPrx.ice_checkedCast(proxy, '::ssdd::Cristian', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_ssdd.CristianPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::ssdd::Cristian'
    _M_ssdd._t_CristianPrx = IcePy.defineProxy('::ssdd::Cristian', CristianPrx)

    _M_ssdd.CristianPrx = CristianPrx
    del CristianPrx

    _M_ssdd.Cristian = Ice.createTempClass()
    class Cristian(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::ssdd::Cristian')

        def ice_id(self, current=None):
            return '::ssdd::Cristian'

        @staticmethod
        def ice_staticId():
            return '::ssdd::Cristian'

        def getServerTime(self, dni, tc1, current=None):
            raise NotImplementedError("servant method 'getServerTime' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_ssdd._t_CristianDisp)

        __repr__ = __str__

    _M_ssdd._t_CristianDisp = IcePy.defineClass('::ssdd::Cristian', Cristian, (), None, ())
    Cristian._ice_type = _M_ssdd._t_CristianDisp

    Cristian._op_getServerTime = IcePy.Operation('getServerTime', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_double, False, 0)), (), ((), IcePy._t_double, False, 0), ())

    _M_ssdd.Cristian = Cristian
    del Cristian

_M_ssdd._t_SyncReport = IcePy.defineValue('::ssdd::SyncReport', Ice.Value, -1, (), False, True, None, ())

if 'SyncReportPrx' not in _M_ssdd.__dict__:
    _M_ssdd.SyncReportPrx = Ice.createTempClass()
    class SyncReportPrx(Ice.ObjectPrx):

        def notifyTime(self, dni, fullname, tc2, newTime, error, context=None):
            return _M_ssdd.SyncReport._op_notifyTime.invoke(self, ((dni, fullname, tc2, newTime, error), context))

        def notifyTimeAsync(self, dni, fullname, tc2, newTime, error, context=None):
            return _M_ssdd.SyncReport._op_notifyTime.invokeAsync(self, ((dni, fullname, tc2, newTime, error), context))

        def begin_notifyTime(self, dni, fullname, tc2, newTime, error, _response=None, _ex=None, _sent=None, context=None):
            return _M_ssdd.SyncReport._op_notifyTime.begin(self, ((dni, fullname, tc2, newTime, error), _response, _ex, _sent, context))

        def end_notifyTime(self, _r):
            return _M_ssdd.SyncReport._op_notifyTime.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_ssdd.SyncReportPrx.ice_checkedCast(proxy, '::ssdd::SyncReport', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_ssdd.SyncReportPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::ssdd::SyncReport'
    _M_ssdd._t_SyncReportPrx = IcePy.defineProxy('::ssdd::SyncReport', SyncReportPrx)

    _M_ssdd.SyncReportPrx = SyncReportPrx
    del SyncReportPrx

    _M_ssdd.SyncReport = Ice.createTempClass()
    class SyncReport(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::ssdd::SyncReport')

        def ice_id(self, current=None):
            return '::ssdd::SyncReport'

        @staticmethod
        def ice_staticId():
            return '::ssdd::SyncReport'

        def notifyTime(self, dni, fullname, tc2, newTime, error, current=None):
            raise NotImplementedError("servant method 'notifyTime' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_ssdd._t_SyncReportDisp)

        __repr__ = __str__

    _M_ssdd._t_SyncReportDisp = IcePy.defineClass('::ssdd::SyncReport', SyncReport, (), None, ())
    SyncReport._ice_type = _M_ssdd._t_SyncReportDisp

    SyncReport._op_notifyTime = IcePy.Operation('notifyTime', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_double, False, 0), ((), IcePy._t_double, False, 0), ((), IcePy._t_double, False, 0)), (), None, ())

    _M_ssdd.SyncReport = SyncReport
    del SyncReport

# End of module ssdd
